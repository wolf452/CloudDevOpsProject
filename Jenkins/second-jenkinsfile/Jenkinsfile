@Library('my-shared-library') _  // Load the shared library

pipeline {
    agent { label 'ansible-test' }

    environment {
        DOCKER_IMAGE = 'docker.io/ahmedmaher07/project'
        DEPLOYMENT_YAML = 'deployment.yaml'
        FINAL_PROJECT_DIR = 'FinalProjectCode-main'  // Define the directory for the project
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Cloning the source code from GitHub"
                // Cloning the repository into the FinalProjectCode-main directory
                git url: 'https://github.com/wolf452/CloudDevOpsProject.git', branch: 'main'
            }
        }

        stage('Unit Test') {
            steps {
                dir(FINAL_PROJECT_DIR) {  // Change directory to FinalProjectCode-main
                    unitTestStage()  // Calls the unitTestStage.groovy function
                }
            }
        }

        stage('Build') {
            steps {
                dir(FINAL_PROJECT_DIR) {  // Change directory to FinalProjectCode-main
                    buildStage()  // Calls the buildStage.groovy function
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir(FINAL_PROJECT_DIR) {  // Change directory to FinalProjectCode-main
                    sonarQubeStage()  // Calls the sonarQubeStage.groovy function
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                dockerLoginStage()  // Calls the dockerLoginStage.groovy function
            }
        }

        stage('Build Docker Image') {
            steps {
                dir(FINAL_PROJECT_DIR) {  // Change directory to FinalProjectCode-main
                    dockerBuildStage()  // Calls the dockerBuildStage.groovy function
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                dockerPushStage()  // Calls the dockerPushStage.groovy function
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                deployStage('/home/ubuntu/jenkins/config', DEPLOYMENT_YAML)  // Calls the deployStage.groovy function
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully."
        }
        failure {
            echo "Pipeline failed. Please check the logs for details."
        }
    }
}
